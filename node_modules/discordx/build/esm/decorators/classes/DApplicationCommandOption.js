import { Decorator } from "@discordx/internal";
/**
 * @category Decorator
 */
export class DApplicationCommandOption extends Decorator {
    _autocomplete;
    _channelTypes = undefined;
    _choices = [];
    _description;
    _descriptionLocalizations;
    _name;
    _nameLocalizations;
    _maxValue;
    _minValue;
    _options = [];
    _required = true;
    _type;
    get autocomplete() {
        return this._autocomplete;
    }
    set autocomplete(value) {
        this._autocomplete = value;
    }
    get channelTypes() {
        return this._channelTypes;
    }
    set channelTypes(value) {
        this._channelTypes = value;
    }
    get choices() {
        return this._choices;
    }
    set choices(value) {
        this._choices = value;
    }
    get description() {
        return this._description;
    }
    set description(value) {
        this._description = value;
    }
    get descriptionLocalizations() {
        return this._descriptionLocalizations;
    }
    set descriptionLocalizations(value) {
        this._descriptionLocalizations = value;
    }
    get isNode() {
        return this.type === "SUB_COMMAND" || this.type === "SUB_COMMAND_GROUP";
    }
    get maxValue() {
        return this._maxValue;
    }
    set maxValue(value) {
        this._maxValue = value;
    }
    get minValue() {
        return this._minValue;
    }
    set minValue(value) {
        this._minValue = value;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get nameLocalizations() {
        return this._nameLocalizations;
    }
    set nameLocalizations(value) {
        this._nameLocalizations = value;
    }
    get options() {
        return this._options;
    }
    set options(value) {
        this._options = value;
    }
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = value;
    }
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value;
    }
    constructor(name, autocomplete, channelType, description, index, maxValue, minValue, required, type, descriptionLocalizations, nameLocalizations) {
        super();
        this._name = name;
        this._autocomplete = autocomplete;
        this._channelTypes = channelType?.sort();
        this._description =
            description ?? `${name} - ${type ?? "STRING"}`.toLowerCase();
        this._index = index;
        this._maxValue = maxValue;
        this._minValue = minValue;
        this._required = required ?? true;
        this._type = type ?? "STRING";
        this._descriptionLocalizations = descriptionLocalizations;
        this._nameLocalizations = nameLocalizations;
    }
    static create(name, autocomplete, channelType, description, index, maxValue, minValue, required, type, descriptionLocalizations, nameLocalizations) {
        return new DApplicationCommandOption(name, autocomplete, channelType, description, index, maxValue, minValue, required, type, descriptionLocalizations, nameLocalizations);
    }
    toJSON() {
        const options = [...this.options]
            .reverse()
            .map((option) => option.toJSON());
        const data = {
            autocomplete: this.autocomplete ? true : undefined,
            channelTypes: this.channelTypes,
            choices: this.isNode
                ? undefined
                : this.choices.length === 0
                    ? undefined
                    : this.choices.map((choice) => choice.toJSON()),
            description: this.description,
            descriptionLocalizations: this.descriptionLocalizations,
            maxValue: this.maxValue,
            minValue: this.minValue,
            name: this.name,
            nameLocalizations: this.nameLocalizations,
            options: options.length === 0 ? undefined : options,
            required: this.isNode ? undefined : this.required,
            type: this.type,
        };
        return data;
    }
}
//# sourceMappingURL=DApplicationCommandOption.js.map