import { Decorator } from "@discordx/internal";
import type { ApplicationCommandOptionData, ApplicationCommandOptionType } from "discord.js";
import type { LocalizationMap } from "discord-api-types/v9";
import type { ChannelTypes, DApplicationCommandOptionChoice, SlashAutoCompleteOption } from "../../index.js";
/**
 * @category Decorator
 */
export declare class DApplicationCommandOption extends Decorator {
    private _autocomplete;
    private _channelTypes;
    private _choices;
    private _description;
    private _descriptionLocalizations?;
    private _name;
    private _nameLocalizations?;
    private _maxValue?;
    private _minValue?;
    private _options;
    private _required;
    private _type;
    get autocomplete(): SlashAutoCompleteOption;
    set autocomplete(value: SlashAutoCompleteOption);
    get channelTypes(): ChannelTypes[] | undefined;
    set channelTypes(value: ChannelTypes[] | undefined);
    get choices(): DApplicationCommandOptionChoice[];
    set choices(value: DApplicationCommandOptionChoice[]);
    get description(): string;
    set description(value: string);
    get descriptionLocalizations(): LocalizationMap | undefined;
    set descriptionLocalizations(value: LocalizationMap | undefined);
    get isNode(): boolean;
    get maxValue(): number | undefined;
    set maxValue(value: number | undefined);
    get minValue(): number | undefined;
    set minValue(value: number | undefined);
    get name(): string;
    set name(value: string);
    get nameLocalizations(): LocalizationMap | undefined;
    set nameLocalizations(value: LocalizationMap | undefined);
    get options(): DApplicationCommandOption[];
    set options(value: DApplicationCommandOption[]);
    get required(): boolean;
    set required(value: boolean);
    get type(): ApplicationCommandOptionType;
    set type(value: ApplicationCommandOptionType);
    protected constructor(name: string, autocomplete?: SlashAutoCompleteOption, channelType?: ChannelTypes[], description?: string, index?: number, maxValue?: number, minValue?: number, required?: boolean, type?: ApplicationCommandOptionType, descriptionLocalizations?: LocalizationMap, nameLocalizations?: LocalizationMap);
    static create(name: string, autocomplete?: SlashAutoCompleteOption, channelType?: ChannelTypes[], description?: string, index?: number, maxValue?: number, minValue?: number, required?: boolean, type?: ApplicationCommandOptionType, descriptionLocalizations?: LocalizationMap, nameLocalizations?: LocalizationMap): DApplicationCommandOption;
    toJSON(): ApplicationCommandOptionData;
}
