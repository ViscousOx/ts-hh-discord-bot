import { DApplicationCommandOption, resolveIGuilds, resolveIPermissions, } from "../../index.js";
import { Method } from "./Method.js";
/**
 * @category Decorator
 */
export class DApplicationCommand extends Method {
    _botIds;
    _name;
    _nameLocalizations;
    _defaultPermission;
    _description;
    _descriptionLocalizations;
    _guilds;
    _group;
    _options = [];
    _permissions = [];
    _subgroup;
    _type;
    get botIds() {
        return this._botIds;
    }
    set botIds(value) {
        this._botIds = value;
    }
    get defaultPermission() {
        return this._defaultPermission;
    }
    set defaultPermission(value) {
        this._defaultPermission = value;
    }
    get description() {
        return this._description;
    }
    set description(value) {
        this._description = value;
    }
    get descriptionLocalizations() {
        return this._descriptionLocalizations;
    }
    set descriptionLocalizations(value) {
        this._descriptionLocalizations = value;
    }
    get group() {
        return this._group;
    }
    set group(value) {
        this._group = value;
    }
    get guilds() {
        return this._guilds;
    }
    set guilds(value) {
        this._guilds = value;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get nameLocalizations() {
        return this._nameLocalizations;
    }
    set nameLocalizations(value) {
        this._nameLocalizations = value;
    }
    get options() {
        return this._options;
    }
    set options(value) {
        this._options = value;
    }
    get permissions() {
        return this._permissions;
    }
    set permissions(value) {
        this._permissions = value;
    }
    get subgroup() {
        return this._subgroup;
    }
    set subgroup(value) {
        this._subgroup = value;
    }
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value;
    }
    constructor(name, type, description, defaultPermission, guilds, botIds, descriptionLocalizations, nameLocalizations) {
        super();
        this._name = name;
        this._type = type;
        this._description = description ?? this.name;
        this._defaultPermission = defaultPermission ?? true;
        this._guilds = guilds ?? [];
        this._botIds = botIds ?? [];
        this._descriptionLocalizations = descriptionLocalizations;
        this._nameLocalizations = nameLocalizations;
    }
    static create(name, type, description, defaultPermission, guilds, botIds, descriptionLocalizations, nameLocalizations) {
        return new DApplicationCommand(name, type, description, defaultPermission, guilds, botIds, descriptionLocalizations, nameLocalizations);
    }
    isBotAllowed(botId) {
        if (!this.botIds.length) {
            return true;
        }
        return this.botIds.includes(botId);
    }
    async getGuilds(client) {
        const guilds = await resolveIGuilds(client, this, [
            ...client.botGuilds,
            ...this.guilds,
        ]);
        return guilds;
    }
    async isGuildAllowed(client, guildId) {
        if (!guildId) {
            return true;
        }
        const guilds = await this.getGuilds(client);
        if (!guilds.length) {
            return true;
        }
        return guilds.includes(guildId);
    }
    resolvePermissions(guild, command) {
        return resolveIPermissions(guild, command, this.permissions);
    }
    toSubCommand() {
        const option = DApplicationCommandOption.create(this.name, undefined, undefined, this.description, undefined, undefined, undefined, undefined, "SUB_COMMAND").decorate(this.classRef, this.key, this.method, this.from, this.index);
        option.options = this.options;
        return option;
    }
    async toJSON(command) {
        if (this.type !== "CHAT_INPUT") {
            const data = {
                defaultPermission: typeof this.defaultPermission === "boolean"
                    ? this.defaultPermission
                    : await this.defaultPermission.resolver(command),
                description: "",
                name: this.name,
                nameLocalizations: this.nameLocalizations ?? null,
                options: [],
                type: this.type,
            };
            return data;
        }
        const options = [...this.options]
            .reverse()
            .sort((a, b) => {
            if ((a.type === "SUB_COMMAND" || a.type === "SUB_COMMAND_GROUP") &&
                (b.type === "SUB_COMMAND" || b.type === "SUB_COMMAND_GROUP")) {
                return a.name < b.name ? -1 : 1;
            }
            return 0;
        })
            .map((option) => option.toJSON());
        const data = {
            defaultPermission: typeof this.defaultPermission === "boolean"
                ? this.defaultPermission
                : await this.defaultPermission.resolver(command),
            description: this.description,
            descriptionLocalizations: this.descriptionLocalizations ?? null,
            name: this.name,
            nameLocalizations: this.nameLocalizations ?? null,
            options: options,
            type: this.type,
        };
        return data;
    }
    parseParams(interaction) {
        return [...this.options].reverse().map((op) => {
            switch (op.type) {
                case "ATTACHMENT":
                    return interaction.options.getAttachment(op.name) ?? undefined;
                case "STRING":
                    return interaction.options.getString(op.name) ?? undefined;
                case "BOOLEAN":
                    return interaction.options.getBoolean(op.name) ?? undefined;
                case "NUMBER":
                    return interaction.options.getNumber(op.name) ?? undefined;
                case "INTEGER":
                    return interaction.options.getInteger(op.name) ?? undefined;
                case "ROLE":
                    return interaction.options.getRole(op.name) ?? undefined;
                case "CHANNEL":
                    return interaction.options.getChannel(op.name) ?? undefined;
                case "MENTIONABLE":
                    return interaction.options.getMentionable(op.name) ?? undefined;
                case "USER":
                    return (interaction.options.getMember(op.name) ??
                        interaction.options.getUser(op.name) ??
                        undefined);
                default:
                    return interaction.options.getString(op.name) ?? undefined;
            }
        });
    }
}
//# sourceMappingURL=DApplicationCommand.js.map